module net;

private import std.stdio;
private import std.c.string;
private import std.c.stdlib;
private import std.socket;
private import std.intrinsic;

import mongo_h;
import bson_h;

int send(Socket sock, void* buf, size_t len, int flags)
{
	void[] bb = buf[0 .. len];
	int ll = sock.send(bb);
	return ll;
}

int recv(Socket sock, void* buf, size_t len, int flags)
{
	void[] bb = buf[0 .. len];
	int ll = sock.receive(bb);
	return ll;
}

void mongo_close_socket(Socket sock)
{
	sock.close();
}

int mongo_socket_connect(mongo* conn, const char* host, int port)
{
	conn.sock = new Socket(AddressFamily.INET, SocketType.STREAM, ProtocolType.TCP);
	InternetAddress addr = new InternetAddress(cast(string) host[0 .. strlen(host)], cast(ushort) port);
	conn.sock.connect(addr);
	
	if (conn.sock.isAlive())
	{
	    conn.sock.setOption(SocketOptionLevel.TCP, SocketOption.TCP_NODELAY, true);
	    return MONGO_OK;
	}
	else
	{
    	    conn.sock = null;
            conn.err = MONGO_CONN_FAIL;
            return MONGO_ERROR;
                        	
	}
}

